<?php


define('SVGIMG_PNG_PATH','svgimg');

function svgimg_menu() {
	$items = array();
	$path = svgimg_path();
	
  $items[$path . '/%'] = array(
     'title' => 'SVG PNG render',
     'description' => 'Configure Metatag defaults.',
     'page callback' => 'svgimg_render',
     'access callback' => TRUE,
     'file' => 'svgimg.render.inc',
   );
	
	return $items;
}

/*
* implements hook_field_attach_view_alter
*/
function svgimg_field_attach_view_alter(&$output, $context) {
	foreach ($output as $field_name => &$field_data) {

		if (is_array($field_data) && isset($field_data['#field_type']) && is_array($field_data['#items']) ) {
			switch ($field_data['#field_type']) {
				case 'image':
				case 'file':
					$count = count($field_data['#items']);
					if ($count > 0) {
						module_load_include('inc', 'svgimg');
						svgimg_image_svg_loop_items($field_data,$count);
					}
					break;		
			}
		}
	}
}

/*
 * Implements hook_field_formatter_info()
 */
function svgimg_field_formatter_info() {
	return array(
		'svgimg' => array(
				'label' => t('Inline SVG'),
				'field types' => array('image','file'),
				'settings' => array(
				),
		),
  );
}

/*
 * Implements hook_field_formatter_settings_summary()
*/
function svgimg_field_formatter_settings_summary($field, $instance, $view_mode) {
	$summary = '';
	$display = $instance['display'][$view_mode];
	switch ($display['type']) {
		case 'svgimg': 
			module_load_include('inc', 'svgimg','svgimg.admin');
			$summary = _svgimg_field_formatter_settings_summary($field, $instance, $view_mode,$display['type']);
			break;
	}
	return $summary;
}

/*
 * Implements hook_field_formatter_settings_form()
*/
function svgimg_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
	$display = $instance['display'][$view_mode];
	$element = array();
	switch ($display['type']) {
		case 'svgimg': 
			module_load_include('inc', 'svgimg','svgimg.admin');
			$element = _svgimg_field_formatter_settings_form($field, $display,$form, $form_state);
			break;
	}
	return $element;
}

/*
 * Implements hook_field_formatter_view()
*/
function svgimg_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'svgimg':
    	if (!empty($items) && is_array($items)) {
    		module_load_include('inc', 'svgimg');
    		$element = svgimg_build_element($items,$display);
    	}
    	break;
  }
  return $element;
}

/*
* Implements hook_theme_registry_alter
* Provide custom media thumbnail for SVG images
*/
function svgimg_theme_registry_alter(&$theme_registry) {
	if (!empty($theme_registry['media_thumbnail']['function'])) {
		$theme_registry['media_thumbnail']['function'] = 'svgimg_theme_media_thumbnail';
	}
}

/*
* Override for media 2.0's theme_media_thumbnail required to replace thumbnail images with SVGs, which are naturally scalable. Should work with media 1.x series too
*/
function svgimg_theme_media_thumbnail($variables) {
  $label = '';
  $element = $variables['element'];

 // Wrappers to go around the thumbnail.
  $attributes = array(
    'title' => $element['#name'],
    'class' => 'media-item',
    'data-fid' => $element['#file']->fid,
  );
  $prefix = '<div ' . drupal_attributes($attributes) . '><div class="media-thumbnail">';
  $suffix = '</div></div>';

  // Arguments for the thumbnail link.
  $thumb = $element['#children'];
	if (isset($element['#file']) && is_object($element['#file'])) {
		$file = $element['#file'];
		if (isset($file->filemime)) {
			if (strpos($file->filemime,'image/svg') === 0) {
				$element['#style_name'] = NULL;
				$thumb = preg_replace('#styles/[a-z0-9_-]+/(public|private)/#i','',$thumb);
			}
		}
	}
  if (function_exists('file_entity_access') && file_entity_access('update', $element['#file'])) {
    $target = 'file/' . $element['#file']->fid . '/edit';
    $title = t('Click to edit details');
  }
  else {
    $target = 'file/' . $element['#file']->fid;
    $title = t('Click to view details');
  }
  $options = array(
    'query' => drupal_get_destination(),
    'html' => TRUE,
    'attributes' => array('title' => $title),
  );

  // Element should be a field renderable array. This should be improved.
  if (!empty($element['#show_names']) && $element['#name']) {
    $label = '<div class="label-wrapper"><label class="media-filename">' . $element['#name'] . '</label></div>';
  }

  $output = $prefix;
  if (!empty($element['#add_link'])) {
    $output .= l($thumb, $target, $options);
  }
  else {
    $output .= $thumb;
  }
  $output .= $label . $suffix;
  return $output;
}

/*
* Fetch path to directory for PNG alternatives
*/
function svgimg_path() {
	return variable_get('file_public_path','sites/default/files') . '/' . SVGIMG_PNG_PATH;
}